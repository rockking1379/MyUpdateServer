#!/usr/bin/env node

/**
 * Module dependencies.
 */
var DEFAULT_CONF = {
  HTTP_ENABLE:true,
  HTTP_PORT:65000,
  SSL_KEY:'<key here>',
  SSL_CERT:'<cert here>',
  CA_CERT:'<certAuth cert here>'
};
var app = require('../app');
var fs = require('fs');
var os = require('os');
var debug = require('debug')('MyUpdateServer:server');
var https = require('https');
var http = require('http');
var config;

if(fs.existsSync('./config.json'))
{
  var confFile = fs.readFileSync('./config.json');
  config = JSON.parse(confFile);
}
else
{
  console.log("No Config Found!\nWriting Default One!");
  fs.writeFileSync("./config.json", JSON.stringify(DEFAULT_CONF));
  console.log("Please Edit this Config");
  process.exit();
}

var privateKey;
var certificate;
var certAuth;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(config.HTTP_PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server;

if(config.HTTP_ENABLE)
{
  server = http.createServer(app);
}
else
{
  privateKey = fs.readFileSync(config.SSL_KEY);
  certificate = fs.readFileSync(config.SSL_CERT);
  certAuth = fs.readFileSync(config.CA_CERT);
  server = https.createServer({
    key:privateKey,
    cert:certificate,
    ca:certAuth
  }, app);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
